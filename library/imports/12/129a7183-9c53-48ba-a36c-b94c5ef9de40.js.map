{"version":3,"sources":["../../../../assets/scripts/assets/scripts/GameController.js"],"names":["cc","Class","extends","Component","properties","listImage","default","type","SpriteFrame","square","Prefab","tmpSquare","UIController","require","score","onLoad","listSquare","squarePool","NodePool","initCount","tmpType","i","instantiate","put","initLevel","hidePlayButton","index","length","typeCreate","action1","delayTime","action2","callFunc","createSquare","action3","node","runAction","sequence","repeat","setUpPositionSquares","maxRow","maxCol","duration","row","col","x","y","log","startX","startY","emit","moveAction","moveTo","easing","easeSineOut","moveAction1","spriteFrame","size","get","parent","on","onTouchCard","setPosition","push","evt","getCurrentTarget","userData","getUserData","pushToTempSquares","stopPropagation","getTmpSquare","setTmpSquare","clearTmpSquare","removeSquare","indexOf","splice","pushToTempList","checkMatchSquare","typeSquare1","typeSquare2","countScore","checkWinGame","showVictory","setScore","showScore","playAgain","hideUIplayAgain"],"mappings":"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","file":"GameController.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        listImage: {\n            default: [],\n            type: cc.SpriteFrame\n        },\n\n        square: {\n            default: null,\n            type: cc.Prefab\n        },\n\n        tmpSquare: {\n            default: [],\n            type: cc.Prefab\n        },\n        UIController: require(\"UIConTroller\"),\n        score: 0,\n\n    },\n\n    onLoad() {\n\n        this.listSquare = [];\n        this.squarePool = new cc.NodePool();\n        let initCount = 20;\n        let tmpType = -1;\n        for (let i = 0; i < initCount; ++i) {\n            let square = cc.instantiate(this.square);\n            this.squarePool.put(square);\n        }\n\n    },\n\n\n    initLevel: function () {\n        this.UIController.hidePlayButton();\n        let index = (this.listImage.length * 2) + 1;\n        let typeCreate = 0;\n        let action1 = cc.delayTime(0.1);\n        let action2 = cc.callFunc(() => {\n            index--;\n            this.createSquare(index, typeCreate, this.listImage[typeCreate]);\n        }, this);\n        let action3 = cc.callFunc(() => {\n            index--;\n            this.createSquare(index, typeCreate, this.listImage[typeCreate]);\n            typeCreate++;\n        }, this);\n\n\n        this.node.runAction(cc.sequence(\n            cc.repeat(cc.sequence(action1, action2, action1, action3), this.listImage.length),\n            cc.delayTime(1),\n            cc.callFunc(() => {\n                this.setUpPositionSquares();\n            })\n        )\n        );\n    },\n\n    setUpPositionSquares() {\n        let maxRow = 4;\n        let maxCol = 5;\n        let index = this.listSquare.length - 1;\n        let duration = 0;\n\n        // this.listSquare = this.listSquare.sort(() => Math.random() - 0.5);\n        for (let row = 0; row < maxRow; row++) {\n            for (let col = 0; col < maxCol; col++) {\n                let x = - 128 + (col * 64);\n                let y = 100 + (-row * 64);\n                let square = this.listSquare[index];\n\n                cc.log(\"check pos: \" + x + \" : \" + y );\n                let startX = x === 0 ? 0 : (x > 0 ? x + 50 : x - 50);\n                let startY = y > 0 ? y +50 : y -50;\n\n                square.emit(\"SHOW_INDEX\");\n                let moveAction = cc.moveTo(0.5, startX, startY).easing(cc.easeSineOut());\n                let moveAction1 = cc.moveTo(0.5, x, y).easing(cc.easeSineOut());\n                let sequence = cc.sequence(\n                    cc.delayTime(0.1 * duration),\n                    moveAction,\n                    moveAction1,\n                );\n                square.runAction(sequence);\n                index--;\n                duration++;\n            }\n        }\n    },\n\n    createSquare(index, type, spriteFrame) {\n        let square = null;\n        if (this.squarePool.size() > 0) {\n            cc.log(\"size pool: \" + this.squarePool.size());\n            square = this.squarePool.get();\n            square.emit(\"REUSE\");\n\n        } else {\n            square = cc.instantiate(this.square);\n        }\n        square.parent = this.node;\n        // square.on(cc.Node.EventType.TOUCH_END, this.onClickCard, this);\n        square.on(\"ON_TYPE\", this.onTouchCard, this);\n        square.emit(\"INIT_INFO\", index, type, spriteFrame, this);\n        square.setPosition(0, 0, 0);\n        this.listSquare.push(square);\n\n    },\n\n\n    onTouchCard(evt) {\n        if (this.tmpSquare.length >= 2)\n            return;\n        let square = evt.getCurrentTarget();\n        let userData = evt.getUserData();\n        let type = userData.type;\n        square.emit(\"TOUCH_SQUARE\");\n        this.pushToTempSquares(square, type);\n        evt.stopPropagation();\n    },\n\n    getTmpSquare() {\n        return this.tmpSquare;\n    },\n\n    setTmpSquare(square) {\n        this.tmpSquare = square;\n    },\n\n    clearTmpSquare() {\n        this.tmpSquare = [];\n    },\n\n    removeSquare(square) {\n        this.squarePool.put(square);\n        let index = this.listSquare.indexOf(square);\n        this.listSquare.splice(index, 1);\n        cc.log(\"size pool: \" + this.squarePool.size());\n    },\n\n    pushToTempSquares(square, type) {\n        if (this.tmpSquare.length === 0) {\n            this.pushToTempList(square);\n            this.tmpType = type;\n        }\n        else if (this.tmpSquare.length === 1) {\n            if (this.tmpSquare[0] != square) {\n                this.pushToTempList(square);\n                this.checkMatchSquare(type);\n            }\n        }\n    },\n\n    checkMatchSquare(type) {\n        if (this.tmpSquare.length >= 2 && this.tmpType != -1) {\n\n\n            let typeSquare1 = this.tmpType;\n            let typeSquare2 = type;\n\n            let sequence = cc.sequence(\n                cc.delayTime(1),\n                cc.callFunc(() => {\n                    if (typeSquare1 != typeSquare2) {\n                        this.tmpSquare[0].emit(\"RESET_SQUARE\");\n                        this.tmpSquare[1].emit(\"RESET_SQUARE\");\n                    }\n                    else {\n                        this.tmpSquare[0].emit(\"MATCH_SQUARE\");\n                        this.tmpSquare[1].emit(\"MATCH_SQUARE\");\n                    }\n                }),\n                cc.delayTime(1),\n            \n                cc.callFunc(() => {\n                    this.removeSquare(this.tmpSquare[0]);\n                    this.removeSquare(this.tmpSquare[1]);\n                    this.countScore();\n                    this.checkWinGame();\n\n                    this.clearTmpSquare();\n                    this.tmpType = -1;\n                })\n            );\n            this.node.runAction(sequence);\n        }\n    },\n\n    pushToTempList(square) {\n        this.tmpSquare.push(square);\n    },\n\n    checkWinGame() {\n        if (this.listSquare.length <= 0) {\n            this.UIController.showVictory();\n        }\n    },\n\n    countScore() {\n        let action1 = cc.delayTime(0.1);\n        let action2 = cc.callFunc(() => {\n            this.score += 1;\n            this.setScore();\n        }, this);\n        this.node.runAction(cc.repeat(cc.sequence(action1, action2), 10));\n    },\n\n    setScore() {\n        this.UIController.showScore(this.score);\n    },\n\n    playAgain() {\n        this.UIController.hideUIplayAgain();\n        this.initLevel();\n    },\n\n\n});\n"]}