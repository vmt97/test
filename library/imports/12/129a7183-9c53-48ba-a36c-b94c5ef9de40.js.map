{"version":3,"sources":["../../../../assets/scripts/assets/scripts/GameController.js"],"names":["cc","Class","extends","Component","properties","listImage","default","type","SpriteFrame","square","Prefab","tmpSquare","UIController","require","score","onLoad","listSquare","squarePool","NodePool","initCount","tmpType","i","instantiate","put","node","on","onTouchCard","initLevel","hidePlayButton","index","length","typeCreate","action1","delayTime","action2","callFunc","createSquare","action3","runAction","sequence","repeat","setUpPositionSquares","maxRow","maxCol","duration","row","col","x","y","startX","startY","emit","moveAction","moveTo","easing","easeSineOut","moveAction1","spriteFrame","size","get","parent","setPosition","push","evt","stopPropagation","target","userData","getUserData","pushToTempSquares","getTmpSquare","setTmpSquare","clearTmpSquare","removeSquare","indexOf","splice","pushToTempList","checkMatchSquare","typeSquare1","typeSquare2","countScore","checkWinGame","showVictory","setScore","showScore","playAgain","hideUIplayAgain"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,mBAAW;AACPC,qBAAS,EADF;AAEPC,kBAAMP,GAAGQ;AAFF,SADH;;AAMRC,gBAAQ;AACJH,qBAAS,IADL;AAEJC,kBAAMP,GAAGU;AAFL,SANA;;AAWRC,mBAAW;AACPL,qBAAS,EADF;AAEPC,kBAAMP,GAAGU;AAFF,SAXH;AAeRE,sBAAcC,QAAQ,cAAR,CAfN;AAgBRC,eAAO;;AAhBC,KAHP;;AAuBLC,UAvBK,oBAuBI;;AAEL,aAAKC,UAAL,GAAkB,EAAlB;AACA,aAAKC,UAAL,GAAkB,IAAIjB,GAAGkB,QAAP,EAAlB;AACA,YAAIC,YAAY,EAAhB;AACA,YAAIC,UAAU,CAAC,CAAf;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,SAApB,EAA+B,EAAEE,CAAjC,EAAoC;AAChC,gBAAIZ,SAAST,GAAGsB,WAAH,CAAe,KAAKb,MAApB,CAAb;AACA,iBAAKQ,UAAL,CAAgBM,GAAhB,CAAoBd,MAApB;AACH;AACD,aAAKe,IAAL,CAAUC,EAAV,CAAa,SAAb,EAAwB,KAAKC,WAA7B,EAA0C,IAA1C;AAEH,KAnCI;;;AAsCLC,eAAW,qBAAY;AAAA;;AACnB,aAAKf,YAAL,CAAkBgB,cAAlB;AACA,YAAIC,QAAS,KAAKxB,SAAL,CAAeyB,MAAf,GAAwB,CAAzB,GAA8B,CAA1C;AACA,YAAIC,aAAa,CAAjB;AACA,YAAIC,UAAUhC,GAAGiC,SAAH,CAAa,GAAb,CAAd;AACA,YAAIC,UAAUlC,GAAGmC,QAAH,CAAY,YAAM;AAC5BN;AACA,kBAAKO,YAAL,CAAkBP,KAAlB,EAAyBE,UAAzB,EAAqC,MAAK1B,SAAL,CAAe0B,UAAf,CAArC;AACH,SAHa,EAGX,IAHW,CAAd;AAIA,YAAIM,UAAUrC,GAAGmC,QAAH,CAAY,YAAM;AAC5BN;AACA,kBAAKO,YAAL,CAAkBP,KAAlB,EAAyBE,UAAzB,EAAqC,MAAK1B,SAAL,CAAe0B,UAAf,CAArC;AACAA;AACH,SAJa,EAIX,IAJW,CAAd;;AAOA,aAAKP,IAAL,CAAUc,SAAV,CAAoBtC,GAAGuC,QAAH,CAChBvC,GAAGwC,MAAH,CAAUxC,GAAGuC,QAAH,CAAYP,OAAZ,EAAqBE,OAArB,EAA8BF,OAA9B,EAAuCK,OAAvC,CAAV,EAA2D,KAAKhC,SAAL,CAAeyB,MAA1E,CADgB,EAEhB9B,GAAGiC,SAAH,CAAa,CAAb,CAFgB,EAGhBjC,GAAGmC,QAAH,CAAY,YAAM;AACd,kBAAKM,oBAAL;AACH,SAFD,CAHgB,CAApB;AAQH,KA9DI;;AAgELA,wBAhEK,kCAgEkB;AACnB,YAAIC,SAAS,CAAb;AACA,YAAIC,SAAS,CAAb;AACA,YAAId,QAAQ,KAAKb,UAAL,CAAgBc,MAAhB,GAAyB,CAArC;AACA,YAAIc,WAAW,CAAf;;AAEA;AACA,aAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAMH,MAAxB,EAAgCG,KAAhC,EAAuC;AACnC,iBAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAMH,MAAxB,EAAgCG,KAAhC,EAAuC;AACnC,oBAAIC,IAAI,CAAE,GAAF,GAASD,MAAM,EAAvB;AACA,oBAAIE,IAAI,MAAO,CAACH,GAAD,GAAO,EAAtB;AACA,oBAAIpC,SAAS,KAAKO,UAAL,CAAgBa,KAAhB,CAAb;;AAEA,oBAAIoB,SAASF,MAAM,CAAN,GAAU,CAAV,GAAeA,IAAI,CAAJ,GAAQA,IAAI,EAAZ,GAAiBA,IAAI,EAAjD;AACA,oBAAIG,SAASF,IAAI,CAAJ,GAAQA,IAAG,EAAX,GAAgBA,IAAG,EAAhC;;AAEAvC,uBAAO0C,IAAP,CAAY,YAAZ;AACA,oBAAIC,aAAapD,GAAGqD,MAAH,CAAU,GAAV,EAAeJ,MAAf,EAAuBC,MAAvB,EAA+BI,MAA/B,CAAsCtD,GAAGuD,WAAH,EAAtC,CAAjB;AACA,oBAAIC,cAAcxD,GAAGqD,MAAH,CAAU,GAAV,EAAeN,CAAf,EAAkBC,CAAlB,EAAqBM,MAArB,CAA4BtD,GAAGuD,WAAH,EAA5B,CAAlB;AACA,oBAAIhB,WAAWvC,GAAGuC,QAAH,CACXvC,GAAGiC,SAAH,CAAa,MAAMW,QAAnB,CADW,EAEXQ,UAFW,EAGXI,WAHW,CAAf;AAKA/C,uBAAO6B,SAAP,CAAiBC,QAAjB;AACAV;AACAe;AACH;AACJ;AACJ,KA7FI;AA+FLR,gBA/FK,wBA+FQP,KA/FR,EA+FetB,IA/Ff,EA+FqBkD,WA/FrB,EA+FkC;AACnC,YAAIhD,SAAS,IAAb;AACA,YAAI,KAAKQ,UAAL,CAAgByC,IAAhB,KAAyB,CAA7B,EAAgC;AAC5BjD,qBAAS,KAAKQ,UAAL,CAAgB0C,GAAhB,EAAT;AACAlD,mBAAO0C,IAAP,CAAY,OAAZ;AAEH,SAJD,MAIO;AACH1C,qBAAST,GAAGsB,WAAH,CAAe,KAAKb,MAApB,CAAT;AACH;AACDA,eAAOmD,MAAP,GAAgB,KAAKpC,IAArB;AACA;AACA;AACAf,eAAO0C,IAAP,CAAY,WAAZ,EAAyBtB,KAAzB,EAAgCtB,IAAhC,EAAsCkD,WAAtC,EAAmD,IAAnD;AACAhD,eAAOoD,WAAP,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AACA,aAAK7C,UAAL,CAAgB8C,IAAhB,CAAqBrD,MAArB;AAEH,KA/GI;AAkHLiB,eAlHK,uBAkHOqC,GAlHP,EAkHY;AACbA,YAAIC,eAAJ;;AAEA,YAAI,KAAKrD,SAAL,CAAemB,MAAf,IAAyB,CAA7B,EACI;AACJ,YAAIrB,SAASsD,IAAIE,MAAjB;AACA,YAAIC,WAAWH,IAAII,WAAJ,EAAf;AACA,YAAI5D,OAAO2D,SAAS3D,IAApB;AACAE,eAAO0C,IAAP,CAAY,cAAZ;AACA,aAAKiB,iBAAL,CAAuB3D,MAAvB,EAA+BF,IAA/B;AAEH,KA7HI;AA+HL8D,gBA/HK,0BA+HU;AACX,eAAO,KAAK1D,SAAZ;AACH,KAjII;AAmIL2D,gBAnIK,wBAmIQ7D,MAnIR,EAmIgB;AACjB,aAAKE,SAAL,GAAiBF,MAAjB;AACH,KArII;AAuIL8D,kBAvIK,4BAuIY;AACb,aAAK5D,SAAL,GAAiB,EAAjB;AACH,KAzII;AA2IL6D,gBA3IK,wBA2IQ/D,MA3IR,EA2IgB;AACjB,aAAKQ,UAAL,CAAgBM,GAAhB,CAAoBd,MAApB;AACA,YAAIoB,QAAQ,KAAKb,UAAL,CAAgByD,OAAhB,CAAwBhE,MAAxB,CAAZ;AACA,aAAKO,UAAL,CAAgB0D,MAAhB,CAAuB7C,KAAvB,EAA8B,CAA9B;AACH,KA/II;AAiJLuC,qBAjJK,6BAiJa3D,MAjJb,EAiJqBF,IAjJrB,EAiJ2B;AAC5B,YAAI,KAAKI,SAAL,CAAemB,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,iBAAK6C,cAAL,CAAoBlE,MAApB;AACA,iBAAKW,OAAL,GAAeb,IAAf;AACH,SAHD,MAIK,IAAI,KAAKI,SAAL,CAAemB,MAAf,KAA0B,CAA9B,EAAiC;AAClC,gBAAI,KAAKnB,SAAL,CAAe,CAAf,KAAqBF,MAAzB,EAAiC;AAC7B,qBAAKkE,cAAL,CAAoBlE,MAApB;AACA,qBAAKmE,gBAAL,CAAsBrE,IAAtB;AACH;AACJ;AACJ,KA5JI;AA8JLqE,oBA9JK,4BA8JYrE,IA9JZ,EA8JkB;AAAA;;AACnB,YAAI,KAAKI,SAAL,CAAemB,MAAf,IAAyB,CAAzB,IAA8B,KAAKV,OAAL,IAAgB,CAAC,CAAnD,EAAsD;;AAGlD,gBAAIyD,cAAc,KAAKzD,OAAvB;AACA,gBAAI0D,cAAcvE,IAAlB;;AAEA,gBAAIgC,WAAWvC,GAAGuC,QAAH,CACXvC,GAAGiC,SAAH,CAAa,CAAb,CADW,EAEXjC,GAAGmC,QAAH,CAAY,YAAM;AACd,oBAAI0C,eAAeC,WAAnB,EAAgC;AAC5B,2BAAKnE,SAAL,CAAe,CAAf,EAAkBwC,IAAlB,CAAuB,cAAvB;AACA,2BAAKxC,SAAL,CAAe,CAAf,EAAkBwC,IAAlB,CAAuB,cAAvB;AACH,iBAHD,MAIK;AACD,2BAAKxC,SAAL,CAAe,CAAf,EAAkBwC,IAAlB,CAAuB,cAAvB;AACA,2BAAKxC,SAAL,CAAe,CAAf,EAAkBwC,IAAlB,CAAuB,cAAvB;AACH;AACJ,aATD,CAFW,EAYXnD,GAAGiC,SAAH,CAAa,CAAb,CAZW,EAcXjC,GAAGmC,QAAH,CAAY,YAAM;AACd,uBAAKqC,YAAL,CAAkB,OAAK7D,SAAL,CAAe,CAAf,CAAlB;AACA,uBAAK6D,YAAL,CAAkB,OAAK7D,SAAL,CAAe,CAAf,CAAlB;AACA,uBAAKoE,UAAL;AACA,uBAAKC,YAAL;;AAEA,uBAAKT,cAAL;AACA,uBAAKnD,OAAL,GAAe,CAAC,CAAhB;AACH,aARD,CAdW,CAAf;AAwBA,iBAAKI,IAAL,CAAUc,SAAV,CAAoBC,QAApB;AACH;AACJ,KA/LI;AAiMLoC,kBAjMK,0BAiMUlE,MAjMV,EAiMkB;AACnB,aAAKE,SAAL,CAAemD,IAAf,CAAoBrD,MAApB;AACH,KAnMI;AAqMLuE,gBArMK,0BAqMU;AACX,YAAI,KAAKhE,UAAL,CAAgBc,MAAhB,IAA0B,CAA9B,EAAiC;AAC7B,iBAAKlB,YAAL,CAAkBqE,WAAlB;AACH;AACJ,KAzMI;AA2MLF,cA3MK,wBA2MQ;AAAA;;AACT,YAAI/C,UAAUhC,GAAGiC,SAAH,CAAa,GAAb,CAAd;AACA,YAAIC,UAAUlC,GAAGmC,QAAH,CAAY,YAAM;AAC5B,mBAAKrB,KAAL,IAAc,CAAd;AACA,mBAAKoE,QAAL;AACH,SAHa,EAGX,IAHW,CAAd;AAIA,aAAK1D,IAAL,CAAUc,SAAV,CAAoBtC,GAAGwC,MAAH,CAAUxC,GAAGuC,QAAH,CAAYP,OAAZ,EAAqBE,OAArB,CAAV,EAAyC,EAAzC,CAApB;AACH,KAlNI;AAoNLgD,YApNK,sBAoNM;AACP,aAAKtE,YAAL,CAAkBuE,SAAlB,CAA4B,KAAKrE,KAAjC;AACH,KAtNI;AAwNLsE,aAxNK,uBAwNO;AACR,aAAKxE,YAAL,CAAkByE,eAAlB;AACA,aAAK1D,SAAL;AACH;AA3NI,CAAT","file":"GameController.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        listImage: {\n            default: [],\n            type: cc.SpriteFrame\n        },\n\n        square: {\n            default: null,\n            type: cc.Prefab\n        },\n\n        tmpSquare: {\n            default: [],\n            type: cc.Prefab\n        },\n        UIController: require(\"UIConTroller\"),\n        score: 0,\n\n    },\n\n    onLoad() {\n\n        this.listSquare = [];\n        this.squarePool = new cc.NodePool();\n        let initCount = 20;\n        let tmpType = -1;\n        for (let i = 0; i < initCount; ++i) {\n            let square = cc.instantiate(this.square);\n            this.squarePool.put(square);\n        }\n        this.node.on(\"ON_TYPE\", this.onTouchCard, this);\n\n    },\n\n\n    initLevel: function () {\n        this.UIController.hidePlayButton();\n        let index = (this.listImage.length * 2) + 1;\n        let typeCreate = 0;\n        let action1 = cc.delayTime(0.1);\n        let action2 = cc.callFunc(() => {\n            index--;\n            this.createSquare(index, typeCreate, this.listImage[typeCreate]);\n        }, this);\n        let action3 = cc.callFunc(() => {\n            index--;\n            this.createSquare(index, typeCreate, this.listImage[typeCreate]);\n            typeCreate++;\n        }, this);\n\n\n        this.node.runAction(cc.sequence(\n            cc.repeat(cc.sequence(action1, action2, action1, action3), this.listImage.length),\n            cc.delayTime(1),\n            cc.callFunc(() => {\n                this.setUpPositionSquares();\n            })\n        )\n        );\n    },\n\n    setUpPositionSquares() {\n        let maxRow = 4;\n        let maxCol = 5;\n        let index = this.listSquare.length - 1;\n        let duration = 0;\n\n        // this.listSquare = this.listSquare.sort(() => Math.random() - 0.5);\n        for (let row = 0; row < maxRow; row++) {\n            for (let col = 0; col < maxCol; col++) {\n                let x = - 128 + (col * 64);\n                let y = 100 + (-row * 64);\n                let square = this.listSquare[index];\n\n                let startX = x === 0 ? 0 : (x > 0 ? x + 50 : x - 50);\n                let startY = y > 0 ? y +50 : y -50;\n\n                square.emit(\"SHOW_INDEX\");\n                let moveAction = cc.moveTo(0.5, startX, startY).easing(cc.easeSineOut());\n                let moveAction1 = cc.moveTo(0.5, x, y).easing(cc.easeSineOut());\n                let sequence = cc.sequence(\n                    cc.delayTime(0.1 * duration),\n                    moveAction,\n                    moveAction1,\n                );\n                square.runAction(sequence);\n                index--;\n                duration++;\n            }\n        }\n    },\n\n    createSquare(index, type, spriteFrame) {\n        let square = null;\n        if (this.squarePool.size() > 0) {\n            square = this.squarePool.get();\n            square.emit(\"REUSE\");\n\n        } else {\n            square = cc.instantiate(this.square);\n        }\n        square.parent = this.node;\n        // square.on(cc.Node.EventType.TOUCH_END, this.onClickCard, this);\n        // this.node.on(\"ON_TYPE\", this.onTouchCard, this);\n        square.emit(\"INIT_INFO\", index, type, spriteFrame, this);\n        square.setPosition(0, 0, 0);\n        this.listSquare.push(square);\n\n    },\n\n\n    onTouchCard(evt) {\n        evt.stopPropagation();\n\n        if (this.tmpSquare.length >= 2)\n            return;\n        let square = evt.target;\n        let userData = evt.getUserData();\n        let type = userData.type;\n        square.emit(\"TOUCH_SQUARE\");\n        this.pushToTempSquares(square, type);\n\n    },\n\n    getTmpSquare() {\n        return this.tmpSquare;\n    },\n\n    setTmpSquare(square) {\n        this.tmpSquare = square;\n    },\n\n    clearTmpSquare() {\n        this.tmpSquare = [];\n    },\n\n    removeSquare(square) {\n        this.squarePool.put(square);\n        let index = this.listSquare.indexOf(square);\n        this.listSquare.splice(index, 1);\n    },\n\n    pushToTempSquares(square, type) {\n        if (this.tmpSquare.length === 0) {\n            this.pushToTempList(square);\n            this.tmpType = type;\n        }\n        else if (this.tmpSquare.length === 1) {\n            if (this.tmpSquare[0] != square) {\n                this.pushToTempList(square);\n                this.checkMatchSquare(type);    \n            }\n        }\n    },\n\n    checkMatchSquare(type) {\n        if (this.tmpSquare.length >= 2 && this.tmpType != -1) {\n\n\n            let typeSquare1 = this.tmpType;\n            let typeSquare2 = type;\n\n            let sequence = cc.sequence(\n                cc.delayTime(1),\n                cc.callFunc(() => {\n                    if (typeSquare1 != typeSquare2) {\n                        this.tmpSquare[0].emit(\"RESET_SQUARE\");\n                        this.tmpSquare[1].emit(\"RESET_SQUARE\");\n                    }\n                    else {\n                        this.tmpSquare[0].emit(\"MATCH_SQUARE\");\n                        this.tmpSquare[1].emit(\"MATCH_SQUARE\");\n                    }\n                }),\n                cc.delayTime(1),\n            \n                cc.callFunc(() => {\n                    this.removeSquare(this.tmpSquare[0]);\n                    this.removeSquare(this.tmpSquare[1]);\n                    this.countScore();\n                    this.checkWinGame();\n\n                    this.clearTmpSquare();\n                    this.tmpType = -1;\n                })\n            );\n            this.node.runAction(sequence);\n        }\n    },\n\n    pushToTempList(square) {\n        this.tmpSquare.push(square);\n    },\n\n    checkWinGame() {\n        if (this.listSquare.length <= 0) {\n            this.UIController.showVictory();\n        }\n    },\n\n    countScore() {\n        let action1 = cc.delayTime(0.1);\n        let action2 = cc.callFunc(() => {\n            this.score += 1;\n            this.setScore();\n        }, this);\n        this.node.runAction(cc.repeat(cc.sequence(action1, action2), 10));\n    },\n\n    setScore() {\n        this.UIController.showScore(this.score);\n    },\n\n    playAgain() {\n        this.UIController.hideUIplayAgain();\n        this.initLevel();\n    },\n\n\n});\n"]}